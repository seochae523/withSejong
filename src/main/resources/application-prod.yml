spring:
  main:
    allow-bean-definition-overriding: true
  # 데이터 소스 설정
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    # 작성 필요
    url: jdbc:mysql://${DB_HOST}:${DB_PORT}/${DB_NAME}?serverTimezone=Asia/Seoul&characterEncoding=UTF-8
    username: ${DB_USER_NAME}
    password: ${DB_PASSWORD}
  # JPA 설정
  jpa:
    show-sql: true
    generate-ddl: true
    database: mysql
    hibernate:
      ddl-auto: none
    naming:
      physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
        hbm2ddl.import_files_sql_extractor: org.hibernate.tool.hbm2ddl.MultipleLinesSqlCommandExtractor
        current_session_context_class: org.springframework.orm.hibernate5.SpringSessionContext
        default_batch_fetch_size: 100
        jdbc.batch_size: 1000
        order_inserts: true
        order_updates: true
        format_sql: true
  # 11/25 추가 : 이메일 관련 yml 작성
#  mail:
#    host: ${MAIL_HOST}
#    port: ${MAIL_PORT}
#    username: ${MAIL_USER_NAME}
#    password: ${MAIL_PASSWORD}
#    properties:
#      mail:
#        smtp:
#          auth: true
#          ssl:
#            enable: true
#          starttls:
#            enable: true
#            required: true
#          connectiontimeout: 5000
#          timeout: 5000
#          writetimeout: 5000
#          # auth-code-expiration-millis : 유효시간 5 * 60 * 1000 = 5분
#    auth-code-expiration-millis: 300000

  jwt:
    header: Authorization
    secret: ${JWT_SECRET}
    # 30 * 60 * 1000 = 30분
    access-token-expiration-time: 30000
    # 30 * 24 * 60 * 60 * 1000 = 30일
    refresh-token-expiration-time: 2592000000
  data:
    rest:
      default-page-size: 10



cloud:
  aws:
    s3:
      url: ${S3_URL}
      bucket: ${S3_BUCKET_NAME}
    stack:
      auto: false
    region:
      static: ap-northeast-2
    credentials:
      accessKey: ${S3_ACCESS_KEY}
      secretKey: ${S3_SECRET_KEY}



    dynamodb:
      endpoint: ${DYNAMODB_ENDPOINT}
      region: ${DYNAMODB_REGION}
      accessKey: ${DYNAMODB_ACCESS_KEY}
      secretKey: ${DYNAMODB_SECRET_KEY}

#  kafka:
#    bootstrap-servers: localhost:10000,localhost:10001,localhost:10002 # 카프카 서버 주소
#    producer:
#      key-serializer: org.apache.kafka.common.serialization.StringSerializer
#      value-serializer: org.apache.kafka.common.serialization.StringSerializer
#    consumer:
#      group-id: error-handler-group
#      auto-offset-reset: earliest
#    template:
#      default-topic: error-messages

#logging:
#  discord:
#    webhook-url: ${WEB_HOOK_URL}
#  config: classpath:logback-discord.xml

firebase:
  url: ${FCM_APP_URL}

